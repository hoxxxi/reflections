1. When would you want to use a remote repository rather than keeping all your work local?
Remote repositories allow users to contribute to a project from several different machines as well as to collaborate with other developers.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Because you might work on a new version that is not ready to be shared with the rest of the world.

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork copies a repository on GitHub to a new repository on your account (keeping history of previous commits).
Clone copies an online repository to your local machine or copies a local repository to another location.
Branches extend current commits to give a view of how the code should progress.

4. What is the benefit of having a copy of the last known state of the remote stored locally?
So that the user can merge it with his/her current most recent version.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
GitHub enables developers to contribute to each others code however, the main author has to accept the changes. But it also gives you an opportunity to continue with a branch on your personal repository if you think that they are wrong not to accept the change.
The hard bit is getting used to all the commands. But it is empowering to use the git shell as it gives you very logical functionality.

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Usually, developers could work on a new feature, test it and than eventually add it to the master branch. That way you have a working version while you are working on new features and even if you dramatically fail in your attempt to introduce the new features you can always revert to the latest working version and give it another try.